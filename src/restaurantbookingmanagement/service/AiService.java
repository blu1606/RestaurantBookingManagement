package restaurantbookingmanagement.service;

import restaurantbookingmanagement.model.*;
import restaurantbookingmanagement.ai.AIResponse;
import restaurantbookingmanagement.view.ConsoleView;
import java.util.List;

public class AiService {
    public void processAddMenuAction(AIResponse aiResponse, OrderService orderService, ConsoleView view) {
        String name = aiResponse.getMenuItemName();
        Double price = aiResponse.getMenuItemPrice();
        String description = aiResponse.getMenuItemDescription();
        if (name == null || price == null) {
            view.displayError("‚ùå Thi·∫øu th√¥ng tin t√™n ho·∫∑c gi√° m√≥n ƒÉn.");
            return;
        }
        MenuItem newItem = orderService.addMenuItem(name, price, description != null ? description : "");
        if (newItem != null) {
            view.displaySuccess("‚úÖ ƒê√£ th√™m m√≥n ƒÉn m·ªõi: " + name + " - " + String.format("%.0f VND", price));
        } else {
            view.displayError("‚ùå Kh√¥ng th·ªÉ th√™m m√≥n ƒÉn. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    }
    public void processDeleteMenuAction(AIResponse aiResponse, OrderService orderService, ConsoleView view) {
        Integer itemId = aiResponse.getMenuItemId();
        if (itemId == null) {
            view.displayError("‚ùå Thi·∫øu ID m√≥n ƒÉn c·∫ßn x√≥a.");
            return;
        }
        boolean success = orderService.deleteMenuItem(itemId);
        if (success) {
            view.displaySuccess("‚úÖ ƒê√£ x√≥a m√≥n ƒÉn #" + itemId);
        } else {
            view.displayError("‚ùå Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn #" + itemId + " ho·∫∑c kh√¥ng th·ªÉ x√≥a.");
        }
    }
    public void processAddTableAction(AIResponse aiResponse, BookingService bookingService, ConsoleView view) {
        Integer capacity = aiResponse.getTableCapacity();
        if (capacity == null || capacity <= 0 || capacity > 12) {
            view.displayError("‚ùå S·ª©c ch·ª©a ph·∫£i t·ª´ 1 ƒë·∫øn 12 ng∆∞·ªùi.");
            return;
        }
        Table newTable = bookingService.addTable(capacity);
        if (newTable != null) {
            view.displaySuccess("‚úÖ ƒê√£ th√™m b√†n m·ªõi: B√†n #" + newTable.getTableId() + " cho " + capacity + " ng∆∞·ªùi");
        } else {
            view.displayError("‚ùå Kh√¥ng th·ªÉ th√™m b√†n. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    }
    public void processDeleteBookingAction(AIResponse aiResponse, BookingService bookingService, ConsoleView view) {
        Integer bookingId = aiResponse.getBookingId();
        if (bookingId == null) {
            view.displayError("‚ùå Thi·∫øu ID ƒë·∫∑t b√†n c·∫ßn x√≥a.");
            return;
        }
        boolean success = bookingService.deleteBooking(bookingId);
        if (success) {
            view.displaySuccess("‚úÖ ƒê√£ x√≥a ƒë·∫∑t b√†n #" + bookingId);
        } else {
            view.displayError("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n #" + bookingId + " ho·∫∑c kh√¥ng th·ªÉ x√≥a.");
        }
    }
    public void processFixDataAction(BookingService bookingService, ConsoleView view) {
        bookingService.fixBookingsWithNullCustomer();
        view.displaySuccess("‚úÖ ƒê√£ ki·ªÉm tra v√† s·ª≠a c√°c l·ªói d·ªØ li·ªáu.");
    }
    public void processCustomerSearchAction(AIResponse aiResponse, CustomerService customerService, ConsoleView view) {
        String searchTerm = aiResponse.getSearchTerm();
        if (searchTerm == null || searchTerm.trim().isEmpty()) {
            view.displayError("‚ùå Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm.");
            return;
        }
        List<Customer> results = customerService.searchCustomers(searchTerm);
        if (results.isEmpty()) {
            view.displayMessage("üìù Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng n√†o ph√π h·ª£p v·ªõi: " + searchTerm);
        } else {
            view.displayMessage("üìù T√¨m th·∫•y " + results.size() + " kh√°ch h√†ng:");
            for (Customer customer : results) {
                view.displayMessage("  - " + customer.getName() + " (" + customer.getPhone() + ")");
            }
        }
    }
    public void processShowMenuAction(OrderService orderService, ConsoleView view) {
        view.displayMenu(orderService.getAllMenuItems());
    }
} 