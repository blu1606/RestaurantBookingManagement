package restaurantbookingmanagement.ai.handlers;

import java.util.HashMap;
import java.util.Map;
import restaurantbookingmanagement.ai.AIResponse;
import restaurantbookingmanagement.view.ConsoleView;
import restaurantbookingmanagement.model.Customer;
import restaurantbookingmanagement.model.Booking;
import restaurantbookingmanagement.model.MenuItem;
import restaurantbookingmanagement.model.Table;
import restaurantbookingmanagement.model.CustomerInfo;

public class AIActionHandlerRegistry {
    private final Map<String, AIActionHandler> handlers = new HashMap<>();
    public AIActionHandlerRegistry() {
        handlers.put("create_booking", new CreateBookingHandler());
        handlers.put("add_menu", new AddMenuHandler());
        handlers.put("delete_menu", new DeleteMenuHandler());
        handlers.put("update_menu", new UpdateMenuHandler());
        handlers.put("add_item_to_order", new AddItemToOrderHandler());
        handlers.put("remove_item_from_order", new RemoveItemFromOrderHandler());
        handlers.put("complete_order", new CompleteOrderHandler());
        handlers.put("calculate_bill", new CalculateBillHandler());
        handlers.put("get_revenue", new GetRevenueHandler());
        handlers.put("show_menu", new ShowMenuHandler());
        handlers.put("add_table", new AddTableHandler());
        handlers.put("delete_table", new DeleteTableHandler());
        handlers.put("update_table", new UpdateTableHandler());
        handlers.put("search_tables", new SearchTablesHandler());
        handlers.put("show_available_tables", new ShowAvailableTablesHandler());
        handlers.put("show_all_tables", new ShowAllTablesHandler());
        handlers.put("cancel_booking", new CancelBookingHandler());
        handlers.put("complete_booking", new CompleteBookingHandler());
        handlers.put("update_booking", new UpdateBookingHandler());
        handlers.put("delete_booking", new DeleteBookingHandler());
        handlers.put("fix_data", new FixDataHandler());
        handlers.put("create_customer", new CreateCustomerHandler());
        handlers.put("update_customer", new UpdateCustomerHandler());
        handlers.put("delete_customer", new DeleteCustomerHandler());
        handlers.put("get_customer_info", new GetCustomerInfoHandler());
        handlers.put("customer_search", new CustomerSearchHandler());
        handlers.put("ask_for_info", new AskForInfoHandler());
        handlers.put("error", new ErrorHandler());
        handlers.put("menu_suggestion", new MenuSuggestionActionHandler());
        handlers.put("out_of_scope", new OutOfScopeHandler());
        handlers.put("clarify", new ClarifyHandler());
        handlers.put("redirect", new RedirectHandler());
        handlers.put("general_info", new GeneralInfoHandler());
        handlers.put("restaurant_address", new GeneralInfoHandler());
        handlers.put("opening_hours", new GeneralInfoHandler());
        handlers.put("contact_info", new GeneralInfoHandler());
        handlers.put("services_info", new GeneralInfoHandler());
        handlers.put("directions", new GeneralInfoHandler());
        handlers.put("greeting", new GeneralInfoHandler());
        handlers.put("positive_feedback", new GeneralInfoHandler());
        handlers.put("negative_feedback", new GeneralInfoHandler());
        handlers.put("suggestion", new GeneralInfoHandler());
        handlers.put("thank_you", new GeneralInfoHandler());
    }
    // --- Handler implementations ---
    public static class DeleteMenuHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer itemId = AIResponseUtils.getInt(response.getParameters(), "itemId");
            if (itemId == null) {
                view.displayError("‚ùå Thi·∫øu ID m√≥n ƒÉn c·∫ßn x√≥a.");
                return;
            }
            boolean success = context.getMenuService().deleteMenuItem(itemId);
            if (success) {
                view.displaySuccess("‚úÖ ƒê√£ x√≥a m√≥n ƒÉn #" + itemId);
            } else {
                view.displayError("‚ùå Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn #" + itemId + " ho·∫∑c kh√¥ng th·ªÉ x√≥a.");
            }
        }
    }
    public static class UpdateMenuHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer itemId = AIResponseUtils.getInt(response.getParameters(), "itemId");
            String name = AIResponseUtils.getString(response.getParameters(), "name");
            Double price = AIResponseUtils.getDouble(response.getParameters(), "price");
            String description = AIResponseUtils.getString(response.getParameters(), "description");
            if (itemId == null) {
                view.displayError("‚ùå Thi·∫øu ID m√≥n ƒÉn c·∫ßn c·∫≠p nh·∫≠t.");
                return;
            }
            boolean success = context.getMenuService().updateMenuItem(itemId, name, String.valueOf(price), description);
            if (success) {
                view.displaySuccess("‚úÖ ƒê√£ c·∫≠p nh·∫≠t m√≥n ƒÉn #" + itemId);
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m√≥n ƒÉn #" + itemId);
            }
        }
    }
    public static class AddItemToOrderHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer orderId = AIResponseUtils.getInt(response.getParameters(), "orderId");
            String itemName = AIResponseUtils.getString(response.getParameters(), "itemName");
            Integer quantity = AIResponseUtils.getInt(response.getParameters(), "quantity");
            if (orderId == null || itemName == null || quantity == null) {
                view.displayError("‚ùå Thi·∫øu th√¥ng tin orderId, itemName ho·∫∑c quantity.");
                return;
            }
            boolean success = context.getOrderService().addItemToOrder(orderId, itemName, quantity);
            if (success) {
                view.displaySuccess("‚úÖ ƒê√£ th√™m " + quantity + " " + itemName + " v√†o ƒë∆°n h√†ng #" + orderId);
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ th√™m m√≥n v√†o ƒë∆°n h√†ng.");
            }
        }
    }
    public static class RemoveItemFromOrderHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer orderId = AIResponseUtils.getInt(response.getParameters(), "orderId");
            String itemName = AIResponseUtils.getString(response.getParameters(), "itemName");
            if (orderId == null || itemName == null) {
                view.displayError("‚ùå Thi·∫øu th√¥ng tin orderId ho·∫∑c itemName.");
                return;
            }
            boolean success = context.getOrderService().removeItemFromOrder(orderId, itemName);
            if (success) {
                view.displaySuccess("‚úÖ ƒê√£ x√≥a " + itemName + " kh·ªèi ƒë∆°n h√†ng #" + orderId);
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ x√≥a m√≥n kh·ªèi ƒë∆°n h√†ng.");
            }
        }
    }
    public static class CompleteOrderHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer orderId = AIResponseUtils.getInt(response.getParameters(), "orderId");
            if (orderId == null) {
                view.displayError("‚ùå Thi·∫øu ID ƒë∆°n h√†ng c·∫ßn ho√†n th√†nh.");
                return;
            }
            boolean success = context.getOrderService().completeOrder(orderId);
            if (success) {
                view.displaySuccess("‚úÖ ƒê√£ ho√†n th√†nh ƒë∆°n h√†ng #" + orderId);
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ ho√†n th√†nh ƒë∆°n h√†ng.");
            }
        }
    }
    public static class CalculateBillHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer bookingId = AIResponseUtils.getInt(response.getParameters(), "bookingId");
            if (bookingId == null) {
                view.displayError("‚ùå Thi·∫øu ID booking c·∫ßn t√≠nh ti·ªÅn.");
                return;
            }
            double bill = context.getOrderService().calculateBillForBooking(bookingId);
            view.displaySuccess("üí∞ T·ªïng ti·ªÅn cho booking #" + bookingId + ": " + String.format("%.0f VND", bill));
        }
    }
    public static class GetRevenueHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            double revenue = context.getOrderService().getTotalRevenue();
            view.displaySuccess("üí∞ T·ªïng doanh thu: " + String.format("%.0f VND", revenue));
        }
    }
    public static class ShowMenuHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            view.displayMenu(context.getMenuService().getAllMenuItems());
        }
    }
    public static class AddTableHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer capacity = AIResponseUtils.getInt(response.getParameters(), "capacity");
            if (capacity == null || capacity <= 0 || capacity > 12) {
                view.displayError("‚ùå S·ª©c ch·ª©a ph·∫£i t·ª´ 1 ƒë·∫øn 12 ng∆∞·ªùi.");
                return;
            }
            Table newTable = context.getTableService().addTable(capacity);
            if (newTable != null) {
                view.displaySuccess("‚úÖ ƒê√£ th√™m b√†n m·ªõi: B√†n #" + newTable.getTableId() + " cho " + capacity + " ng∆∞·ªùi");
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ th√™m b√†n. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        }
    }
    public static class DeleteTableHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer tableId = AIResponseUtils.getInt(response.getParameters(), "tableId");
            if (tableId == null) {
                view.displayError("‚ùå Thi·∫øu ID b√†n c·∫ßn x√≥a.");
                return;
            }
            boolean success = context.getTableService().deleteTable(tableId);
            if (success) {
                view.displaySuccess("‚úÖ ƒê√£ x√≥a b√†n #" + tableId);
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ x√≥a b√†n #" + tableId);
            }
        }
    }
    public static class UpdateTableHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer tableId = AIResponseUtils.getInt(response.getParameters(), "tableId");
            Integer capacity = AIResponseUtils.getInt(response.getParameters(), "capacity");
            String status = AIResponseUtils.getString(response.getParameters(), "status");
            if (tableId == null) {
                view.displayError("‚ùå Thi·∫øu ID b√†n c·∫ßn c·∫≠p nh·∫≠t.");
                return;
            }
            boolean success = context.getTableService().updateTable(tableId, capacity != null ? String.valueOf(capacity) : null, status);
            if (success) {
                view.displaySuccess("‚úÖ ƒê√£ c·∫≠p nh·∫≠t b√†n #" + tableId);
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b√†n #" + tableId);
            }
        }
    }
    public static class SearchTablesHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            String keyword = AIResponseUtils.getString(response.getParameters(), "keyword");
            if (keyword == null || keyword.trim().isEmpty()) {
                view.displayError("‚ùå Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm.");
                return;
            }
            java.util.List<Table> results = context.getTableService().searchTables(keyword);
            if (results.isEmpty()) {
                view.displayMessage("üìù Kh√¥ng t√¨m th·∫•y b√†n n√†o ph√π h·ª£p v·ªõi: " + keyword);
            } else {
                view.displayTables(results);
            }
        }
    }
    public static class ShowAvailableTablesHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            java.util.List<Table> availableTables = context.getTableService().getAvailableTables();
            view.displayTables(availableTables);
        }
    }
    public static class ShowAllTablesHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            java.util.List<Table> allTables = context.getTableService().getAllTables();
            view.displayTables(allTables);
        }
    }
    public static class CancelBookingHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer bookingId = AIResponseUtils.getInt(response.getParameters(), "bookingId");
            if (bookingId == null) {
                view.displayError("‚ùå Thi·∫øu ID ƒë·∫∑t b√†n c·∫ßn h·ªßy.");
                return;
            }
            boolean success = context.getBookingService().cancelBooking(bookingId);
            if (success) {
                view.displaySuccess("‚úÖ ƒê√£ h·ªßy ƒë·∫∑t b√†n #" + bookingId);
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t b√†n #" + bookingId);
            }
        }
    }
    public static class CompleteBookingHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer bookingId = AIResponseUtils.getInt(response.getParameters(), "bookingId");
            if (bookingId == null) {
                view.displayError("‚ùå Thi·∫øu ID ƒë·∫∑t b√†n c·∫ßn ho√†n th√†nh.");
                return;
            }
            context.getBookingService().completeBooking(bookingId);
            view.displaySuccess("‚úÖ ƒê√£ ho√†n th√†nh ƒë·∫∑t b√†n #" + bookingId);
        }
    }
    public static class UpdateBookingHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer bookingId = AIResponseUtils.getInt(response.getParameters(), "bookingId");
            Integer guests = AIResponseUtils.getInt(response.getParameters(), "guests");
            String dateTime = AIResponseUtils.getString(response.getParameters(), "time");
            if (bookingId == null) {
                view.displayError("‚ùå Thi·∫øu ID ƒë·∫∑t b√†n c·∫ßn c·∫≠p nh·∫≠t.");
                return;
            }
            boolean success = context.getBookingService().updateBooking(bookingId, guests != null ? String.valueOf(guests) : null, dateTime);
            if (success) {
                view.displaySuccess("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ƒë·∫∑t b√†n #" + bookingId);
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë·∫∑t b√†n #" + bookingId);
            }
        }
    }
    public static class DeleteBookingHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer bookingId = AIResponseUtils.getInt(response.getParameters(), "bookingId");
            if (bookingId == null) {
                view.displayError("‚ùå Thi·∫øu ID ƒë·∫∑t b√†n c·∫ßn x√≥a.");
                return;
            }
            boolean success = context.getBookingService().deleteBooking(bookingId);
            if (success) {
                view.displaySuccess("‚úÖ ƒê√£ x√≥a ƒë·∫∑t b√†n #" + bookingId);
            } else {
                view.displayError("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n #" + bookingId + " ho·∫∑c kh√¥ng th·ªÉ x√≥a.");
            }
        }
    }
    public static class FixDataHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            context.getBookingService().fixBookingsWithNullCustomer();
            view.displaySuccess("‚úÖ ƒê√£ ki·ªÉm tra v√† s·ª≠a c√°c l·ªói d·ªØ li·ªáu.");
        }
    }
    public static class CreateCustomerHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            String name = AIResponseUtils.getString(response.getParameters(), "customerName");
            String phone = AIResponseUtils.getString(response.getParameters(), "customerPhone");
            String email = AIResponseUtils.getString(response.getParameters(), "customerEmail");
            if (name == null || phone == null) {
                view.displayError("‚ùå Thi·∫øu t√™n ho·∫∑c s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng.");
                return;
            }
            Customer customer = context.getCustomerService().createCustomer(name, phone, email);
            if (customer != null) {
                view.displaySuccess("‚úÖ ƒê√£ t·∫°o kh√°ch h√†ng: " + name + " (" + phone + ")");
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ t·∫°o kh√°ch h√†ng.");
            }
        }
    }
    public static class UpdateCustomerHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer customerId = AIResponseUtils.getInt(response.getParameters(), "customerId");
            String name = AIResponseUtils.getString(response.getParameters(), "customerName");
            String phone = AIResponseUtils.getString(response.getParameters(), "customerPhone");
            String email = AIResponseUtils.getString(response.getParameters(), "customerEmail");
            if (customerId == null) {
                view.displayError("‚ùå Thi·∫øu ID kh√°ch h√†ng c·∫ßn c·∫≠p nh·∫≠t.");
                return;
            }
            boolean success = context.getCustomerService().updateCustomer(customerId, name, phone, email);
            if (success) {
                view.displaySuccess("‚úÖ ƒê√£ c·∫≠p nh·∫≠t kh√°ch h√†ng #" + customerId);
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kh√°ch h√†ng #" + customerId);
            }
        }
    }
    public static class DeleteCustomerHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer customerId = AIResponseUtils.getInt(response.getParameters(), "customerId");
            if (customerId == null) {
                view.displayError("‚ùå Thi·∫øu ID kh√°ch h√†ng c·∫ßn x√≥a.");
                return;
            }
            boolean success = context.getCustomerService().deleteCustomer(customerId);
            if (success) {
                view.displaySuccess("‚úÖ ƒê√£ x√≥a kh√°ch h√†ng #" + customerId);
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ x√≥a kh√°ch h√†ng #" + customerId + " (c√≥ th·ªÉ ƒëang c√≥ ƒë·∫∑t b√†n)");
            }
        }
    }
    public static class GetCustomerInfoHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            Integer customerId = AIResponseUtils.getInt(response.getParameters(), "customerId");
            if (customerId == null) {
                view.displayError("‚ùå Thi·∫øu ID kh√°ch h√†ng c·∫ßn xem th√¥ng tin.");
                return;
            }
            CustomerInfo customerInfo = context.getCustomerService().getCustomerInfo(customerId);
            if (customerInfo != null) {
                context.getCustomerService().displayCustomerInfo(customerInfo);
            } else {
                view.displayError("‚ùå Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng #" + customerId);
            }
        }
    }
    public static class CustomerSearchHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            String searchTerm = AIResponseUtils.getString(response.getParameters(), "searchTerm");
            if (searchTerm == null || searchTerm.trim().isEmpty()) {
                view.displayError("‚ùå Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm.");
                return;
            }
            java.util.List<Customer> results = context.getCustomerService().searchCustomers(searchTerm);
            if (results.isEmpty()) {
                view.displayMessage("üìù Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng n√†o ph√π h·ª£p v·ªõi: " + searchTerm);
            } else {
                context.getCustomerService().displayAllCustomers(results, view);
            }
        }
    }
    public static class CreateBookingHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            String customerName = AIResponseUtils.getString(response.getParameters(), "customerName");
            String customerPhone = AIResponseUtils.getString(response.getParameters(), "customerPhone");
            Integer guests = AIResponseUtils.getInt(response.getParameters(), "guests");
            String dateTime = AIResponseUtils.getString(response.getParameters(), "time");
            if (customerName == null || customerPhone == null || guests == null || dateTime == null) {
                view.displayError("‚ùå Thi·∫øu th√¥ng tin kh√°ch h√†ng ho·∫∑c th·ªùi gian ƒë·∫∑t b√†n.");
                return;
            }
            try {
                Customer customer = new Customer(0, customerName, customerPhone);
                java.time.LocalDateTime bookingTime = java.time.LocalDateTime.parse(dateTime, java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"));
                Booking booking = context.getBookingService().createBooking(customer, guests, bookingTime);
                if (booking != null) {
                    view.displaySuccess("‚úÖ ƒê√£ t·∫°o ƒë·∫∑t b√†n #" + booking.getBookingId() + " cho " + customerName);
                } else {
                    view.displayError("‚ùå Kh√¥ng th·ªÉ t·∫°o ƒë·∫∑t b√†n. C√≥ th·ªÉ b√†n ƒë√£ h·∫øt ho·∫∑c th·ªùi gian b·ªã tr√πng.");
                }
            } catch (Exception e) {
                view.displayError("‚ùå L·ªói ƒë·ªãnh d·∫°ng th·ªùi gian. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng dd/MM/yyyy HH:mm");
            }
        }
    }
    public static class AddMenuHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            String name = AIResponseUtils.getString(response.getParameters(), "name");
            Double price = AIResponseUtils.getDouble(response.getParameters(), "price");
            String description = AIResponseUtils.getString(response.getParameters(), "description");
            if (name == null || price == null) {
                view.displayError("‚ùå Thi·∫øu th√¥ng tin t√™n ho·∫∑c gi√° m√≥n ƒÉn.");
                return;
            }
            MenuItem newItem = context.getMenuService().addMenuItem(name, price, description != null ? description : "");
            if (newItem != null) {
                view.displaySuccess("‚úÖ ƒê√£ th√™m m√≥n ƒÉn m·ªõi: " + name + " - " + String.format("%.0f VND", price));
            } else {
                view.displayError("‚ùå Kh√¥ng th·ªÉ th√™m m√≥n ƒÉn. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        }
    }
    public static class AskForInfoHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            // Hi·ªÉn th·ªã c√¢u h·ªèi b·ªï sung cho user
            String question = response.getNaturalResponse();
            if (question == null || question.trim().isEmpty()) {
                question = "AI c·∫ßn th√™m th√¥ng tin ƒë·ªÉ ti·∫øp t·ª•c. B·∫°n vui l√≤ng cung c·∫•p th√¥ng tin c√≤n thi·∫øu.";
            }
            view.displayMessage(question);
            // TODO: C√≥ th·ªÉ l∆∞u tr·∫°ng th√°i pending n·∫øu mu·ªën x·ª≠ l√Ω ti·∫øp t·ª•c sau n√†y
        }
    }
    public static class ErrorHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            String msg = response.getNaturalResponse();
            if (msg == null || msg.trim().isEmpty()) {
                msg = "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i sau.";
            }
            view.displayError(msg);
        }
    }
    public static class MenuSuggestionActionHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            // Hi·ªÉn th·ªã g·ª£i √Ω m√≥n ƒÉn t·ª´ naturalResponse
            view.displayMessage(response.getNaturalResponse());
        }
    }
    public static class OutOfScopeHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            String msg = response.getNaturalResponse();
            if (msg == null || msg.trim().isEmpty()) {
                msg = "Xin l·ªói, y√™u c·∫ßu c·ªßa b·∫°n n·∫±m ngo√†i ph·∫°m vi h·ªó tr·ª£ c·ªßa h·ªá th·ªëng.";
            }
            view.displayMessage(msg);
        }
    }
    public static class ClarifyHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            String msg = response.getNaturalResponse();
            if (msg == null || msg.trim().isEmpty()) {
                msg = "Xin vui l√≤ng l√†m r√µ y√™u c·∫ßu c·ªßa b·∫°n.";
            }
            view.displayMessage(msg);
        }
    }
    public static class RedirectHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            String msg = response.getNaturalResponse();
            if (msg == null || msg.trim().isEmpty()) {
                msg = "Y√™u c·∫ßu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng t·ªõi b·ªô ph·∫≠n ph√π h·ª£p.";
            }
            view.displayMessage(msg);
        }
    }
    public static class GeneralInfoHandler implements AIActionHandler {
        @Override
        public void handle(AIResponse response, ServiceContext context, ConsoleView view) {
            String msg = response.getNaturalResponse();
            if (msg == null || msg.trim().isEmpty()) {
                msg = "Th√¥ng tin t·ªïng qu√°t v·ªÅ nh√† h√†ng.";
            }
            view.displayMessage(msg);
        }
    }
    public AIActionHandler get(String action) {
        return handlers.get(action);
    }
} 