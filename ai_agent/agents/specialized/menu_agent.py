import json
from typing import Dict, Any, Optional
from ..core.base_agent import BaseAgent

from ..utils import handle_pending_action_utils

class MenuAgent(BaseAgent):
    """
    AI Agent chuy√™n x·ª≠ l√Ω g·ª£i √Ω m√≥n ƒÉn v√† th√¥ng tin menu
    """
    
    def __init__(self, gemini_model=None, user_role: str = "user"):
        super().__init__(
            agent_name="MenuAgent",
            data_files=["menu_items.json"],
            gemini_model=gemini_model,
            user_role=user_role
        )
    
    def get_system_prompt(self) -> str:
        return """
        B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n menu chuy√™n nghi·ªáp c·ªßa nh√† h√†ng Vi·ªát Nam.
        
        Nhi·ªám v·ª• ch√≠nh c·ªßa b·∫°n l√†:
        1. G·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† nhu c·∫ßu kh√°ch h√†ng
        2. Cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ m√≥n ƒÉn (nguy√™n li·ªáu, c√°ch ch·∫ø bi·∫øn, gi√° c·∫£)
        3. Ph√¢n lo·∫°i m√≥n ƒÉn theo lo·∫°i (ch√≠nh, tr√°ng mi·ªáng, ƒë·ªì u·ªëng)
        4. Gi·ªõi thi·ªáu c√°c m√≥n ƒë·∫∑c s·∫£n v√† m√≥n ph·ªï bi·∫øn
        5. T∆∞ v·∫•n m√≥n ƒÉn theo t·∫ßm gi√° v√† s·ªë l∆∞·ª£ng ng∆∞·ªùi
        6. Ch·ªâ s·ª≠ d·ª•ng tool show_menu khi kh√°ch h√†ng y√™u c·∫ßu xem to√†n b·ªô menu
        
        QUAN TR·ªåNG: 
        - Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin t·ª´ menu th·ª±c t·∫ø ƒë∆∞·ª£c cung c·∫•p
        - KH√îNG ƒë∆∞·ª£c b·ªãa th√™m th√¥ng tin m√≥n ƒÉn, gi√° c·∫£ ho·∫∑c m√¥ t·∫£ kh√¥ng c√≥ trong data
        - ƒê∆∞a ra g·ª£i √Ω c·ª• th·ªÉ v·ªõi ID m√≥n ƒÉn, t√™n m√≥n, gi√° v√† m√¥ t·∫£ ch√≠nh x√°c t·ª´ menu
        - Lu√¥n ƒë·ªÅ c·∫≠p ƒë·∫øn ID m√≥n ƒÉn (itemId) khi gi·ªõi thi·ªáu m√≥n
        - N·∫øu kh√¥ng c√≥ th√¥ng tin trong menu, h√£y n√≥i r√µ l√† kh√¥ng c√≥ th√¥ng tin
        
        Lu√¥n ƒë·∫£m b·∫£o th√¥ng tin ch√≠nh x√°c v√† t∆∞ v·∫•n nhi·ªát t√¨nh.
        """
    
    def process_request(self, user_input: str, session_id: str = "default", chat_session=None) -> Dict[str, Any]:
        # 1. Check if user_input matches show_menu tool specifically
        tool = self._detect_show_menu_tool(user_input)
        if tool:
            # Extract parameters (simple: just return empty or all None, real use: NLP extract)
            parameters = {param: None for param in tool.get("parameters", [])}
            return self.create_response(
                action=tool["name"],
                parameters=parameters,
                natural_response=f"T√¥i s·∫Ω th·ª±c hi·ªán t√°c v·ª•: {tool['description']} (service: {tool['service']})"
            )
        
        # 2. L·∫•y context t·ª´ knowledge base (menu items) v√† tr·∫£ l·ªùi t·ª± nhi√™n
        context = self._get_relevant_context(user_input)
        
        # Lu√¥n ƒë·∫£m b·∫£o c√≥ th√¥ng tin menu th·ª±c t·∫ø
        try:
            with open("data/menu_items.json", "r", encoding="utf-8") as f:
                menu_data = json.load(f)
            
            # Format menu data m·ªôt c√°ch r√µ r√†ng v·ªõi itemId
            menu_context = "MENU TH·ª∞C T·∫æ C·ª¶A NH√Ä H√ÄNG:\n" + "\n".join([
                f"üçΩÔ∏è ID:{item['itemId']} - {item['name']}: {item['price']:,} VND - {item['description']}"
                for item in menu_data
            ])
            
            # K·∫øt h·ª£p context t·ª´ vector search v·ªõi menu th·ª±c t·∫ø
            if context and context != "Kh√¥ng c√≥ th√¥ng tin b·ªï sung.":
                context = f"{menu_context}\n\nTh√¥ng tin b·ªï sung:\n{context}"
            else:
                context = menu_context
                
        except Exception as e:
            context = "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin menu."
        
        prompt = f"""
        {self.get_system_prompt()}
        
        TH√îNG TIN MENU TH·ª∞C T·∫æ C·ª¶A NH√Ä H√ÄNG:
        {context}
        
        Y√™u c·∫ßu c·ªßa kh√°ch h√†ng: {user_input}
        
        QUAN TR·ªåNG: Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin t·ª´ menu th·ª±c t·∫ø ƒë∆∞·ª£c cung c·∫•p ·ªü tr√™n. KH√îNG ƒë∆∞·ª£c b·ªãa th√™m th√¥ng tin m√≥n ƒÉn, gi√° c·∫£ ho·∫∑c m√¥ t·∫£ kh√¥ng c√≥ trong data.
        
        H√£y ph√¢n t√≠ch y√™u c·∫ßu v√† tr·∫£ l·ªùi chi ti·∫øt d·ª±a tr√™n menu th·ª±c t·∫ø:
        
        - N·∫øu h·ªèi v·ªÅ m√≥n ƒë·∫∑c s·∫£n: Ch·ªâ gi·ªõi thi·ªáu c√°c m√≥n c√≥ trong menu th·ª±c t·∫ø, bao g·ªìm ID m√≥n ƒÉn
        - N·∫øu h·ªèi g·ª£i √Ω m√≥n ƒÉn: ƒê∆∞a ra g·ª£i √Ω c·ª• th·ªÉ v·ªõi ID m√≥n ƒÉn, t√™n m√≥n, gi√° v√† m√¥ t·∫£ t·ª´ menu th·ª±c t·∫ø
        - N·∫øu h·ªèi m√≥n theo gi√°: Ph√¢n lo·∫°i theo t·∫ßm gi√° d·ª±a tr√™n gi√° th·ª±c t·∫ø trong menu, bao g·ªìm ID m√≥n ƒÉn
        - N·∫øu h·ªèi m√≥n theo lo·∫°i: Ph√¢n lo·∫°i m√≥n ch√≠nh, ƒë·ªì u·ªëng, tr√°ng mi·ªáng d·ª±a tr√™n menu th·ª±c t·∫ø, bao g·ªìm ID m√≥n ƒÉn
        - N·∫øu h·ªèi m√≥n ph·ªï bi·∫øn: Ch·ªâ li·ªát k√™ c√°c m√≥n c√≥ trong menu th·ª±c t·∫ø, bao g·ªìm ID m√≥n ƒÉn
        
        Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† chi ti·∫øt. CH·ªà s·ª≠ d·ª•ng th√¥ng tin t·ª´ menu ƒë∆∞·ª£c cung c·∫•p. LU√îN bao g·ªìm ID m√≥n ƒÉn khi gi·ªõi thi·ªáu m√≥n.
        """
        
        response_text = self._call_gemini(prompt, chat_session=chat_session)
        
        # Lu√¥n s·ª≠ d·ª•ng response_text tr·ª±c ti·∫øp thay v√¨ c·ªë g·∫Øng parse JSON
        # V√¨ AI c√≥ th·ªÉ tr·∫£ v·ªÅ text t·ª± nhi√™n thay v√¨ JSON
        return self.create_response(
            action="menu_suggestion",
            parameters={},
            natural_response=response_text
        )
    
    def _detect_show_menu_tool(self, user_input: str) -> Optional[Dict[str, Any]]:
        """
        Ch·ªâ detect tool show_menu, b·ªè qua c√°c tools kh√°c
        """
        if not self.tool_detector:
            return None
        
        # Ch·ªâ t√¨m tool show_menu
        show_menu_tool = None
        for tool in self.tool_detector.tools:
            if tool.get("name") == "show_menu":
                show_menu_tool = tool
                break
        
        if not show_menu_tool:
            return None
        
        # Ki·ªÉm tra xem user input c√≥ match v·ªõi show_menu kh√¥ng
        user_input_lower = user_input.lower()
        show_menu_keywords = ["xem menu", "cho xem menu", "hi·ªÉn th·ªã menu", "menu", "danh s√°ch m√≥n"]
        
        for keyword in show_menu_keywords:
            if keyword in user_input_lower:
                return show_menu_tool
        
        return None
    
    def _format_knowledge_item(self, item: Dict[str, Any]) -> str:
        """
        Format menu knowledge item
        """
        if isinstance(item, dict):
            # Format cho menu items t·ª´ JSON
            if "itemId" in item and "name" in item and "price" in item:
                price = item.get("price", 0)
                if isinstance(price, (int, float)):
                    price_str = f"{price:,} VND"
                else:
                    price_str = str(price)
                return f"üçΩÔ∏è ID:{item.get('itemId', '')} - {item.get('name', '')} - {price_str} - {item.get('description', '')}"
            
            # Format cho c√°c lo·∫°i kh√°c
            elif item.get("type") == "menu_item":
                return f"üçΩÔ∏è {item.get('name', '')} - Gi√°: {item.get('price', '')} VND - {item.get('description', '')}"
            elif item.get("type") == "category":
                return f"üìÇ {item.get('name', '')} - {item.get('description', '')}"
            elif item.get("type") == "special":
                return f"‚≠ê {item.get('name', '')} - {item.get('description', '')}"
        
        return super()._format_knowledge_item(item)

    def handle_pending_action(self, user_input, tool, collected_params, missing_params, session_id, chat_session=None):
        # MenuAgent ch·ªâ c√≥ show_menu, kh√¥ng c√≥ param b·∫Øt bu·ªôc n√™n lu√¥n tr·∫£ v·ªÅ show_menu
        return handle_pending_action_utils(
            user_input,
            tool,
            collected_params,
            missing_params,
            lambda u, t: {},  # Kh√¥ng c·∫ßn extract param
            lambda p, t: [],  # Kh√¥ng c√≥ param thi·∫øu
            lambda m, t, o: self.create_response(
                action="show_menu",
                parameters={},
                natural_response="T√¥i s·∫Ω th·ª±c hi·ªán t√°c v·ª•: Hi·ªÉn th·ªã to√†n b·ªô menu nh√† h√†ng."
            ),
            self.create_response
        ) 